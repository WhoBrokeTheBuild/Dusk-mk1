#include "ExportOBJ.h"

#include <fstream>
#include <iomanip>
#include <sstream>
#include <glm/glm.hpp>

#include "Functions.h"
#include <Arc/ArrayList.h>

using glm::vec3;
using glm::vec2;
using Arc::ArrayList;

bool ExportOBJ( const string& filename, InterModel* pModel )
{
    std::ofstream file(filename.c_str());

    if (!file.is_open())
    {
        error("Cannot open file");
    }
/*
    if (pModel->VertInds.getSize() != pModel->NormInds.getSize())
    {
        error("Vertex/Normal count mismatch");
    }

    file << "# Generated by duskrc\n\n";

    file << "o " << pModel->Name << "\n\n";

    auto extraDec = [](const float& num)
    {
        return (num - (int)num != 0 ? "" : ".0");
    };

    for (auto it = pModel->Verts.itBegin(); it != pModel->Verts.itEnd(); ++it)
    {
        const vec3& vert = (*it);
        file << "v " << vert.x << extraDec(vert.x) << " " << vert.y << extraDec(vert.y) << " " << vert.z << extraDec(vert.z) << "\n";
    }
    file << "\n";

    for (auto it = pModel->Norms.itBegin(); it != pModel->Norms.itEnd(); ++it)
    {
        const vec3& norm = (*it);
        file << "vn " << norm.x << extraDec(norm.x) << " " << norm.y << extraDec(norm.y) << " " << norm.z << extraDec(norm.z) << "\n";
    }
    file << "\n";

    if (!pModel->TexCoords.isEmpty())
    {
        for (auto it = pModel->TexCoords.itBegin(); it != pModel->TexCoords.itEnd(); ++it)
        {
            const vec2& texCoord = (*it);
            file << "vt " << texCoord.x << " " << texCoord.y << "\n";
        }
        file << "\n";
    }

    bool hasTexCoords = ( ! pModel->TexCoordInds.isEmpty());

    for (unsigned int i = 0; i < pModel->VertInds.getSize(); i += 3)
    {
        file << "f ";

        for (unsigned int j = 0; j < 3; ++j)
        {
            const int& index = i + j;

            const int& vertInd = pModel->VertInds[index] + 1;
            const int& normInd = pModel->NormInds[index] + 1;
            const int& texCoordInd = (hasTexCoords ? pModel->TexCoordInds[index] + 1 : -1);

            if (hasTexCoords)
                file << vertInd << "/" << texCoordInd << "/" << normInd;
            else
                file << vertInd << "//" << normInd;

            if (j != 2)
                file << " ";
        }

        file << "\n";
    }
    file << "\n";
*/
    file.close();

    printf("Successfully wrote OBJ File: %s\n", filename.c_str());

    return true;
}
